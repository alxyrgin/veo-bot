require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const logger = require('./utils/logger');
const { initializeDatabase } = require('./database/init');
const { handleStart } = require('./handlers/start');
const { handleMessage } = require('./handlers/message');
const { handleCallback } = require('./handlers/callback');
const { handlePayment } = require('./handlers/payment');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function initBot() {
  try {
    await initializeDatabase();
    logger.info('Database initialized successfully');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    bot.onText(/\/start/, (msg) => handleStart(msg, bot));
    bot.onText(/\/help/, (msg) => handleHelp(msg, bot));
    bot.onText(/\/balance/, (msg) => handleBalance(msg, bot));
    bot.onText(/\/generate/, (msg) => handleGenerate(msg, bot));
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    bot.on('message', (msg) => {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
      if (msg.text && msg.text.startsWith('/')) {
        return;
      }
      handleMessage(msg, bot);
    });
    
    bot.on('callback_query', (query) => handleCallback(query, bot));
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
    bot.on('pre_checkout_query', (query) => handlePayment.preCheckout(query, bot));
    bot.on('successful_payment', (msg) => handlePayment.success(msg, bot));
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    bot.on('error', (error) => {
      logger.error('Bot error:', error);
    });
    
    bot.on('polling_error', (error) => {
      logger.error('Polling error:', error);
    });
    
    logger.info('Bot started successfully!');
    console.log('ü§ñ VEO 3 Bot –∑–∞–ø—É—â–µ–Ω!');
    
  } catch (error) {
    logger.error('Failed to initialize bot:', error);
    process.exit(1);
  }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async function handleHelp(msg, bot) {
  const chatId = msg.chat.id;
  
  const message = `‚ùì <b>–ü–æ–º–æ—â—å</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ /balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å
‚Ä¢ /generate - –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ

<b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ:</b>
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ –∫–Ω–æ–ø–∫—É "üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ"
2. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
3. –û–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤–∏–¥–µ–æ
4. –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @support_bot`;

  await bot.sendMessage(chatId, message, {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
      ]
    }
  });
}

async function handleBalance(msg, bot) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  try {
    const { getUserByTelegramId } = require('./database/models');
    const user = await getUserByTelegramId(userId);
    
    if (!user) {
      await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
      return;
    }
    
    const message = `üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>

üíé <b>–ö—Ä–µ–¥–∏—Ç—ã:</b> ${user.credits}
üìä <b>–°–æ–∑–¥–∞–Ω–æ –≤–∏–¥–µ–æ:</b> ${user.total_videos_generated}
üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> ${new Date(user.created_at).toLocaleDateString('ru-RU')}`;

    await bot.sendMessage(chatId, message, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üí≥ –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã', callback_data: 'buy_credits' },
            { text: 'üìä –ò—Å—Ç–æ—Ä–∏—è', callback_data: 'history_full' }
          ],
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
        ]
      }
    });
    
  } catch (error) {
    logger.error('Error in handleBalance command:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.');
  }
}

async function handleGenerate(msg, bot) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  try {
    const { getUserByTelegramId } = require('./database/models');
    const user = await getUserByTelegramId(userId);
    
    if (!user) {
      await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
      return;
    }
    
    if (user.credits < 1) {
      await bot.sendMessage(chatId, 'üí∞ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üí≥ –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã', callback_data: 'buy_credits' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ]
        }
      });
      return;
    }
    
    const message = `üé¨ <b>–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ</b>

üíé <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> ${user.credits} –∫—Ä–µ–¥–∏—Ç–æ–≤

<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</b>`;

    await bot.sendMessage(chatId, message, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚ö° –ë—ã—Å—Ç—Ä—ã–π (1 –∫—Ä–µ–¥–∏—Ç)', callback_data: 'generate_fast' },
            { text: 'üíé –ü—Ä–µ–º–∏—É–º (2 –∫—Ä–µ–¥–∏—Ç–∞)', callback_data: 'generate_premium' }
          ],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }]
        ]
      }
    });
    
  } catch (error) {
    logger.error('Error in handleGenerate command:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ.');
  }
}

// Graceful shutdown
process.on('SIGINT', () => {
  logger.info('Bot is shutting down...');
  bot.stopPolling();
  process.exit(0);
});

process.on('SIGTERM', () => {
  logger.info('Bot is shutting down...');
  bot.stopPolling();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
initBot();

module.exports = bot; 