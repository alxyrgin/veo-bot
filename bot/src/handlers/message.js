const { getUserByTelegramId, createVideoGeneration, updateUserCredits } = require('../database/models');
const logger = require('../utils/logger');

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();

async function handleMessage(msg, bot) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    const user = await getUserByTelegramId(userId);
    
    if (!user) {
      await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
      return;
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –µ–≥–æ
    if (msg.voice) {
      await handleVoiceMessage(msg, bot, user);
      return;
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –ø—Ä–æ–º–ø—Ç–æ–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
    if (msg.text) {
      await handleTextPrompt(msg, bot, user);
      return;
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –¥—Ä—É–≥–æ–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.sendMessage(chatId, '‚ùì –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –≤–∏–¥–µ–æ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º.');
    
  } catch (error) {
    logger.error('Error in handleMessage:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

async function handleTextPrompt(msg, bot, user) {
  const chatId = msg.chat.id;
  const prompt = msg.text;
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if (user.credits < 1) {
      await bot.sendMessage(chatId, 'üí∞ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ.\n\n–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –Ω—É–∂–µ–Ω –º–∏–Ω–∏–º—É–º 1 –∫—Ä–µ–¥–∏—Ç.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üí≥ –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã', callback_data: 'buy_credits' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ]
        }
      });
      return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const message = `üé¨ <b>–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ</b>

<b>–í–∞—à –ø—Ä–æ–º–ø—Ç:</b> "${prompt}"

üíé <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> ${user.credits} –∫—Ä–µ–¥–∏—Ç–æ–≤

<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</b>`;

    await bot.sendMessage(chatId, message, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚ö° –ë—ã—Å—Ç—Ä—ã–π (1 –∫—Ä–µ–¥–∏—Ç)', callback_data: `generate_fast_${encodePrompt(prompt)}` },
            { text: 'üíé –ü—Ä–µ–º–∏—É–º (2 –∫—Ä–µ–¥–∏—Ç–∞)', callback_data: `generate_premium_${encodePrompt(prompt)}` }
          ],
          [{ text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data: 'create_video' }],
          [{ text: 'üîô –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'back_to_menu' }]
        ]
      }
    });
    
  } catch (error) {
    logger.error('Error in handleTextPrompt:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–ø—Ç–∞.');
  }
}

async function handleVoiceMessage(msg, bot, user) {
  const chatId = msg.chat.id;
  
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const processingMessage = await bot.sendMessage(chatId, 'üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...');
    
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    // –ü–æ–∫–∞ —á—Ç–æ —ç–º—É–ª–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const transcribedText = "–ú–æ–ª–æ–¥–æ–π —á–µ–ª–æ–≤–µ–∫ –∏–¥–µ—Ç –ø–æ –æ—Å–µ–Ω–Ω–µ–º—É –ø–∞—Ä–∫—É –Ω–∞ –∑–∞–∫–∞—Ç–µ"; // –ó–∞–≥–ª—É—à–∫–∞
    
    await bot.editMessageText(`üé§ <b>–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ:</b>\n\n"${transcribedText}"\n\nüíé <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> ${user.credits} –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</b>`, {
      chat_id: chatId,
      message_id: processingMessage.message_id,
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚ö° –ë—ã—Å—Ç—Ä—ã–π (1 –∫—Ä–µ–¥–∏—Ç)', callback_data: `generate_fast_${encodePrompt(transcribedText)}` },
            { text: 'üíé –ü—Ä–µ–º–∏—É–º (2 –∫—Ä–µ–¥–∏—Ç–∞)', callback_data: `generate_premium_${encodePrompt(transcribedText)}` }
          ],
          [{ text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data: 'create_video' }],
          [{ text: 'üîô –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'back_to_menu' }]
        ]
      }
    });
    
  } catch (error) {
    logger.error('Error in handleVoiceMessage:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –≤ callback_data
function encodePrompt(prompt) {
  // –û–±—Ä–µ–∑–∞–µ–º –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∫–æ–¥–∏—Ä—É–µ–º –≤ base64
  const truncated = prompt.substring(0, 50);
  return Buffer.from(truncated).toString('base64').replace(/[+/=]/g, '');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ callback_data
function decodePrompt(encodedPrompt) {
  try {
    return Buffer.from(encodedPrompt, 'base64').toString('utf-8');
  } catch (error) {
    logger.error('Error decoding prompt:', error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ (–±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ callback handler)
async function processVideoGeneration(userId, prompt, videoType, bot) {
  const chatId = userId; // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å chatId –∏–∑ –±–∞–∑—ã –∏–ª–∏ –∫—ç—à–∞
  
  try {
    const user = await getUserByTelegramId(userId);
    const creditsRequired = videoType === 'fast' ? 1 : 2;
    
    if (user.credits < creditsRequired) {
      throw new Error('Insufficient credits');
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const generation = await createVideoGeneration({
      user_id: user.id,
      prompt_original: prompt,
      prompt_enhanced: prompt, // TODO: –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç —Å –ø–æ–º–æ—â—å—é AI
      video_type: videoType,
      credits_used: creditsRequired,
      status: 'processing'
    });
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã
    await updateUserCredits(user.id, -creditsRequired, `–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${videoType} –≤–∏–¥–µ–æ`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const processingMessage = await bot.sendMessage(chatId, `üé¨ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å!</b>

<b>–†–µ–∂–∏–º:</b> ${videoType === 'fast' ? '‚ö° –ë—ã—Å—Ç—Ä—ã–π' : 'üíé –ü—Ä–µ–º–∏—É–º'}
<b>–ü—Ä–æ–º–ø—Ç:</b> "${prompt}"
<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤:</b> ${creditsRequired}

‚è≥ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞...</b> –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.

üí° <b>–°–æ–≤–µ—Ç:</b> –ü–æ–∫–∞ –≤–∏–¥–µ–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è, –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ!`, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üé¨ –°–æ–∑–¥–∞—Ç—å –µ—â–µ –≤–∏–¥–µ–æ', callback_data: 'create_video' }],
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
        ]
      }
    });
    
    // TODO: –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å VEO 3 API
    // –ü–æ–∫–∞ —á—Ç–æ —ç–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    simulateVideoGeneration(generation.id, chatId, bot);
    
    logger.info(`Video generation started: ${generation.id} for user ${userId}`);
    
  } catch (error) {
    logger.error('Error in processVideoGeneration:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.');
  }
}

// –≠–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
async function simulateVideoGeneration(generationId, chatId, bot) {
  // –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ (–∏–º–∏—Ç–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)
  setTimeout(async () => {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const { updateVideoGeneration } = require('../database/models');
      await updateVideoGeneration(generationId, {
        status: 'completed',
        file_url: 'https://example.com/generated_video.mp4',
        file_size_mb: 5.2,
        duration_seconds: 10,
        completed_at: new Date().toISOString()
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await bot.sendMessage(chatId, `üéâ <b>–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!</b>

–í–∞—à–µ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!

üìπ <b>–†–∞–∑–º–µ—Ä:</b> 5.2 –ú–ë
‚è±Ô∏è <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> 10 —Å–µ–∫—É–Ω–¥
‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ì–æ—Ç–æ–≤–æ

üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ:</b> https://example.com/generated_video.mp4`, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üé¨ –°–æ–∑–¥–∞—Ç—å –µ—â–µ –≤–∏–¥–µ–æ', callback_data: 'create_video' }],
            [{ text: 'üí∞ –ë–∞–ª–∞–Ω—Å', callback_data: 'balance' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ]
        }
      });
      
    } catch (error) {
      logger.error('Error in video generation completion:', error);
      await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.');
    }
  }, 30000); // 30 —Å–µ–∫—É–Ω–¥
}

module.exports = {
  handleMessage,
  processVideoGeneration,
  encodePrompt,
  decodePrompt
}; 