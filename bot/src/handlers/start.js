const { createUser, getUserByTelegramId } = require('../database/models');
const logger = require('../utils/logger');

async function handleStart(msg, bot) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const username = msg.from.username;
  const firstName = msg.from.first_name;
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    let user = await getUserByTelegramId(userId);
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if (!user) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
      const referralCode = extractReferralCode(msg.text);
      let referredBy = null;
      
      if (referralCode) {
        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É
        const referrer = await getUserByReferralCode(referralCode);
        if (referrer) {
          referredBy = referrer.id;
        }
      }
      
      user = await createUser(userId, username, firstName, referredBy);
      
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à–µ–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ, –Ω–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å—ã
      if (referredBy) {
        await processReferralBonus(referredBy, user.id);
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const welcomeMessage = user.total_videos_generated === 0 
      ? createWelcomeMessage(user)
      : createReturnMessage(user);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await bot.sendMessage(chatId, welcomeMessage, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ', callback_data: 'create_video' },
            { text: 'üí∞ –ë–∞–ª–∞–Ω—Å', callback_data: 'balance' }
          ],
          [
            { text: 'üí≥ –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã', callback_data: 'buy_credits' },
            { text: 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', callback_data: 'referral' }
          ],
          [
            { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' },
            { text: 'üìñ –¢—É—Ç–æ—Ä–∏–∞–ª', callback_data: 'tutorial' }
          ]
        ]
      }
    });
    
    logger.info(`User interaction: ${userId} - start command`);
    
  } catch (error) {
    logger.error('Error in handleStart:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

function createWelcomeMessage(user) {
  return `üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VEO 3 Bot!</b>

–ü—Ä–∏–≤–µ—Ç, ${user.first_name}! üëã

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ Google VEO 3.

üíé <b>–¢–≤–æ–π –±–∞–ª–∞–Ω—Å:</b> ${user.credits} –∫—Ä–µ–¥–∏—Ç–æ–≤
üéÅ <b>–ü–æ–¥–∞—Ä–æ–∫:</b> –ü–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!

<b>–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:</b>
‚Ä¢ üé¨ –°–æ–∑–¥–∞–≤–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
‚Ä¢ ‚ö° –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (5 —Å–µ–∫—É–Ω–¥)
‚Ä¢ üíé –ü—Ä–µ–º–∏—É–º –∫–∞—á–µ—Å—Ç–≤–æ (10 —Å–µ–∫—É–Ω–¥)
‚Ä¢ üó£Ô∏è –ü–æ–Ω–∏–º–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏, –∫–∞–∫–æ–µ –≤–∏–¥–µ–æ —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å, –∏ —è –≤—Å—ë —Å–¥–µ–ª–∞—é! üöÄ`;
}

function createReturnMessage(user) {
  return `üëã <b>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${user.first_name}!</b>

üíé <b>–¢–≤–æ–π –±–∞–ª–∞–Ω—Å:</b> ${user.credits} –∫—Ä–µ–¥–∏—Ç–æ–≤
üìä <b>–°–æ–∑–¥–∞–Ω–æ –≤–∏–¥–µ–æ:</b> ${user.total_videos_generated}

–ì–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ? üé¨`;
}

function extractReferralCode(text) {
  if (!text) return null;
  
  // –ò—â–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ /start referral_code
  const match = text.match(/\/start\s+(\w+)/);
  return match ? match[1] : null;
}

async function processReferralBonus(referrerId, newUserId) {
  try {
    // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
    await updateUserCredits(referrerId, 2, '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    // –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –Ω–∞—á–∏—Å–ª–∏—Ç—å –±–æ–Ω—É—Å –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    // await updateUserCredits(newUserId, 1, '–ë–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ');
    
    logger.info(`Referral bonus processed: referrer ${referrerId}, new user ${newUserId}`);
  } catch (error) {
    logger.error('Error processing referral bonus:', error);
  }
}

async function getUserByReferralCode(referralCode) {
  try {
    const { supabase } = require('../database/init');
    const { data, error } = await supabase
      .from('users')
      .select('*')
      .eq('referral_code', referralCode)
      .single();
    
    if (error && error.code !== 'PGRST116') throw error;
    return data;
  } catch (error) {
    logger.error('Error getting user by referral code:', error);
    return null;
  }
}

module.exports = {
  handleStart
}; 