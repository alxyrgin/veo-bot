const { getUserByTelegramId, getUserTransactions, getUserVideoGenerations } = require('../database/models');
const logger = require('../utils/logger');

async function handleCallback(query, bot) {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  const data = query.data;
  
  try {
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
    await bot.answerCallbackQuery(query.id);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ callback
    switch (data) {
      case 'create_video':
        await handleCreateVideo(query, bot);
        break;
      case 'balance':
        await handleBalance(query, bot);
        break;
      case 'buy_credits':
        await handleBuyCredits(query, bot);
        break;
      case 'referral':
        await handleReferral(query, bot);
        break;
      case 'help':
        await handleHelp(query, bot);
        break;
      case 'tutorial':
        await handleTutorial(query, bot);
        break;
      case 'back_to_menu':
        await handleBackToMenu(query, bot);
        break;
      default:
        if (data.startsWith('generate_')) {
          await handleGenerateVideo(query, bot);
        } else if (data.startsWith('buy_')) {
          await handleBuyPackage(query, bot);
        } else if (data.startsWith('history_')) {
          await handleHistory(query, bot);
        } else {
          await bot.sendMessage(chatId, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.');
        }
    }
    
  } catch (error) {
    logger.error('Error in handleCallback:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

async function handleCreateVideo(query, bot) {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  
  try {
    const user = await getUserByTelegramId(userId);
    
    if (!user) {
      await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
      return;
    }
    
    if (user.credits < 1) {
      await bot.sendMessage(chatId, 'üí∞ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ.\n\n–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –Ω—É–∂–µ–Ω –º–∏–Ω–∏–º—É–º 1 –∫—Ä–µ–¥–∏—Ç.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üí≥ –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã', callback_data: 'buy_credits' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }]
          ]
        }
      });
      return;
    }
    
    const message = `üé¨ <b>–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ</b>

üíé <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> ${user.credits} –∫—Ä–µ–¥–∏—Ç–æ–≤

<b>–†–µ–∂–∏–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</b>
‚ö° <b>–ë—ã—Å—Ç—Ä—ã–π</b> - 5 —Å–µ–∫, 1 –∫—Ä–µ–¥–∏—Ç
üíé <b>–ü—Ä–µ–º–∏—É–º</b> - 10 —Å–µ–∫, 2 –∫—Ä–µ–¥–∏—Ç–∞

<b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ:</b>
1. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
2. –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –≤ –≤–∏–¥–µ–æ
3. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

<i>–ù–∞–ø—Ä–∏–º–µ—Ä: "–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –æ–∫–µ–∞–Ω–æ–º —Å –ª–µ—Ç–∞—é—â–∏–º–∏ —á–∞–π–∫–∞–º–∏"</i>`;

    await bot.editMessageText(message, {
      chat_id: chatId,
      message_id: query.message.message_id,
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚ö° –ë—ã—Å—Ç—Ä—ã–π (1 –∫—Ä–µ–¥–∏—Ç)', callback_data: 'generate_fast' },
            { text: 'üíé –ü—Ä–µ–º–∏—É–º (2 –∫—Ä–µ–¥–∏—Ç–∞)', callback_data: 'generate_premium' }
          ],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }]
        ]
      }
    });
    
  } catch (error) {
    logger.error('Error in handleCreateVideo:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ.');
  }
}

async function handleBalance(query, bot) {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  
  try {
    const user = await getUserByTelegramId(userId);
    const transactions = await getUserTransactions(user.id, 5);
    
    let message = `üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>

üíé <b>–ö—Ä–µ–¥–∏—Ç—ã:</b> ${user.credits}
üìä <b>–°–æ–∑–¥–∞–Ω–æ –≤–∏–¥–µ–æ:</b> ${user.total_videos_generated}

<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b>
`;

    if (transactions.length > 0) {
      transactions.forEach((transaction, index) => {
        const date = new Date(transaction.created_at).toLocaleDateString('ru-RU');
        const type = getTransactionTypeText(transaction.type);
        const sign = transaction.credits_change > 0 ? '+' : '';
        message += `${index + 1}. ${date} - ${type} ${sign}${transaction.credits_change} –∫—Ä–µ–¥–∏—Ç–æ–≤\n`;
      });
    } else {
      message += '<i>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</i>';
    }

    await bot.editMessageText(message, {
      chat_id: chatId,
      message_id: query.message.message_id,
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üí≥ –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã', callback_data: 'buy_credits' },
            { text: 'üìä –ò—Å—Ç–æ—Ä–∏—è', callback_data: 'history_full' }
          ],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }]
        ]
      }
    });
    
  } catch (error) {
    logger.error('Error in handleBalance:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–ª–∞–Ω—Å–∞.');
  }
}

async function handleBuyCredits(query, bot) {
  const chatId = query.message.chat.id;
  
  const message = `üí≥ <b>–ü–æ–∫—É–ø–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:</b>

üíé <b>–°—Ç–∞—Ä—Ç–æ–≤—ã–π</b> - 5 –∫—Ä–µ–¥–∏—Ç–æ–≤
üí∞ 150 —Ä—É–±–ª–µ–π

üíé <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–π</b> - 10 –∫—Ä–µ–¥–∏—Ç–æ–≤
üí∞ 250 —Ä—É–±–ª–µ–π (—ç–∫–æ–Ω–æ–º–∏—è 50‚ÇΩ)

üíé <b>–ü—Ä–µ–º–∏—É–º</b> - 25 –∫—Ä–µ–¥–∏—Ç–æ–≤
üí∞ 500 —Ä—É–±–ª–µ–π (—ç–∫–æ–Ω–æ–º–∏—è 250‚ÇΩ)

üíé <b>–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π</b> - 50 –∫—Ä–µ–¥–∏—Ç–æ–≤
üí∞ 800 —Ä—É–±–ª–µ–π (—ç–∫–æ–Ω–æ–º–∏—è 700‚ÇΩ)

<b>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</b>
‚Ä¢ –†–æ—Å—Å–∏–π—Å–∫–∏–µ –∫–∞—Ä—Ç—ã (Visa, MasterCard, –ú–ò–†)
‚Ä¢ Telegram Payments
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –ø–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ –±–∞–Ω–∫`;

  await bot.editMessageText(message, {
    chat_id: chatId,
    message_id: query.message.message_id,
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üíé 5 –∫—Ä–µ–¥–∏—Ç–æ–≤ - 150‚ÇΩ', callback_data: 'buy_starter' },
          { text: 'üíé 10 –∫—Ä–µ–¥–∏—Ç–æ–≤ - 250‚ÇΩ', callback_data: 'buy_popular' }
        ],
        [
          { text: 'üíé 25 –∫—Ä–µ–¥–∏—Ç–æ–≤ - 500‚ÇΩ', callback_data: 'buy_premium' },
          { text: 'üíé 50 –∫—Ä–µ–¥–∏—Ç–æ–≤ - 800‚ÇΩ', callback_data: 'buy_unlimited' }
        ],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }]
      ]
    }
  });
}

async function handleReferral(query, bot) {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  
  try {
    const user = await getUserByTelegramId(userId);
    
    const referralLink = `https://t.me/${process.env.BOT_USERNAME}?start=${user.referral_code}`;
    
    const message = `üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>

üéÅ <b>–í–∞—à–∏ –±–æ–Ω—É—Å—ã:</b>
‚Ä¢ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞: +2 –∫—Ä–µ–¥–∏—Ç–∞
‚Ä¢ –ó–∞ –ø–æ–∫—É–ø–∫—É –¥—Ä—É–≥–∞: +5 –∫—Ä–µ–¥–∏—Ç–æ–≤

<b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>
<code>${referralLink}</code>

<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
1. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏
2. –î—Ä—É–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –≤ –±–æ—Ç–µ
3. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 2 –∫—Ä–µ–¥–∏—Ç–∞
4. –ö–æ–≥–¥–∞ –¥—Ä—É–≥ –ø–æ–∫—É–ø–∞–µ—Ç –∫—Ä–µ–¥–∏—Ç—ã, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –µ—â–µ 5

<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üîó <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:</b> ${user.referral_code}
üë• <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π:</b> 0
üí∞ <b>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤:</b> 0`;

    await bot.editMessageText(message, {
      chat_id: chatId,
      message_id: query.message.message_id,
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π', url: `https://t.me/share/url?url=${encodeURIComponent(referralLink)}&text=${encodeURIComponent('üé¨ –°–æ–∑–¥–∞–≤–∞–π –∫—Ä—É—Ç—ã–µ –≤–∏–¥–µ–æ —Å –ò–ò! –ü–æ–ª—É—á–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—Ä–µ–¥–∏—Ç:')}` }],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }]
        ]
      }
    });
    
  } catch (error) {
    logger.error('Error in handleReferral:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.');
  }
}

async function handleHelp(query, bot) {
  const chatId = query.message.chat.id;
  
  const message = `‚ùì <b>–ü–æ–º–æ—â—å</b>

<b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>
‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ /balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å
‚Ä¢ /generate - –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ

<b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ:</b>
1. –ù–∞–∂–º–∏—Ç–µ "üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ"
2. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (–±—ã—Å—Ç—Ä—ã–π –∏–ª–∏ –ø—Ä–µ–º–∏—É–º)
3. –û–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤–∏–¥–µ–æ
4. –î–æ–∂–¥–∏—Ç–µ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

<b>–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:</b>
‚Ä¢ –û–ø–∏—Å—ã–≤–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ —Å—Ü–µ–Ω—É
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫, –ø–æ–≥–æ–¥—É
‚Ä¢ –û–ø–∏—Å—ã–≤–∞–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @support_bot`;

  await bot.editMessageText(message, {
    chat_id: chatId,
    message_id: query.message.message_id,
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }]
      ]
    }
  });
}

async function handleTutorial(query, bot) {
  const chatId = query.message.chat.id;
  
  const message = `üìñ <b>–¢—É—Ç–æ—Ä–∏–∞–ª</b>

<b>üé¨ –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—É—Ç—ã—Ö –≤–∏–¥–µ–æ:</b>

<b>1. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º</b>
‚Ä¢ ‚ö° –ë—ã—Å—Ç—Ä—ã–π - –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –∏ –∏–¥–µ–π
‚Ä¢ üíé –ü—Ä–µ–º–∏—É–º - –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

<b>2. –û–ø–∏—à–∏—Ç–µ —Å—Ü–µ–Ω—É</b>
‚úÖ –•–æ—Ä–æ—à–æ: "–ú–æ–ª–æ–¥–æ–π —á–µ–ª–æ–≤–µ–∫ –≤ –¥–∂–∏–Ω—Å–∞—Ö –∏–¥–µ—Ç –ø–æ –æ—Å–µ–Ω–Ω–µ–º—É –ø–∞—Ä–∫—É –Ω–∞ –∑–∞–∫–∞—Ç–µ, –ª–∏—Å—Ç—å—è –∫—Ä—É–∂–∞—Ç—Å—è –Ω–∞ –≤–µ—Ç—Ä—É"
‚ùå –ü–ª–æ—Ö–æ: "–ß–µ–ª–æ–≤–µ–∫ –∏–¥–µ—Ç"

<b>3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</b>
‚Ä¢ –í—Ä–µ–º—è: —É—Ç—Ä–æ, –¥–µ–Ω—å, –≤–µ—á–µ—Ä, –Ω–æ—á—å
‚Ä¢ –ü–æ–≥–æ–¥–∞: —Å–æ–ª–Ω–µ—á–Ω–æ, –¥–æ–∂–¥—å, —Ç—É–º–∞–Ω
‚Ä¢ –°—Ç–∏–ª—å: –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π
‚Ä¢ –î–≤–∏–∂–µ–Ω–∏—è: –º–µ–¥–ª–µ–Ω–Ω–æ, –±—ã—Å—Ç—Ä–æ, –ø–ª–∞–≤–Ω–æ

<b>4. –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–º–ø—Ç–æ–≤</b>
‚Ä¢ "–ö–æ—Ç –∏–≥—Ä–∞–µ—Ç —Å –º—è—á–æ–º –≤ —Å–æ–ª–Ω–µ—á–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ"
‚Ä¢ "–í–æ–ª–Ω—ã —Ä–∞–∑–±–∏–≤–∞—é—Ç—Å—è –æ —Å–∫–∞–ª—ã –Ω–∞ –∑–∞–∫–∞—Ç–µ"
‚Ä¢ "–î–µ–≤—É—à–∫–∞ —Ç–∞–Ω—Ü—É–µ—Ç –≤ –ø–æ–ª–µ –ø–æ–¥—Å–æ–ª–Ω—É—Ö–æ–≤"

<b>üí° –°–æ–≤–µ—Ç:</b> –ì–æ–≤–æ—Ä–∏—Ç–µ –±–æ—Ç—É –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏!`;

  await bot.editMessageText(message, {
    chat_id: chatId,
    message_id: query.message.message_id,
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ', callback_data: 'create_video' },
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }
        ]
      ]
    }
  });
}

async function handleBackToMenu(query, bot) {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  
  try {
    const user = await getUserByTelegramId(userId);
    
    const message = `üëã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

–ü—Ä–∏–≤–µ—Ç, ${user.first_name}!

üíé <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> ${user.credits} –∫—Ä–µ–¥–∏—Ç–æ–≤
üìä <b>–°–æ–∑–¥–∞–Ω–æ –≤–∏–¥–µ–æ:</b> ${user.total_videos_generated}

–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å? üöÄ`;

    await bot.editMessageText(message, {
      chat_id: chatId,
      message_id: query.message.message_id,
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ', callback_data: 'create_video' },
            { text: 'üí∞ –ë–∞–ª–∞–Ω—Å', callback_data: 'balance' }
          ],
          [
            { text: 'üí≥ –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã', callback_data: 'buy_credits' },
            { text: 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', callback_data: 'referral' }
          ],
          [
            { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' },
            { text: 'üìñ –¢—É—Ç–æ—Ä–∏–∞–ª', callback_data: 'tutorial' }
          ]
        ]
      }
    });
    
  } catch (error) {
    logger.error('Error in handleBackToMenu:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.');
  }
}

async function handleGenerateVideo(query, bot) {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  
  try {
    const user = await getUserByTelegramId(userId);
    const videoType = query.data.replace('generate_', '');
    const creditsRequired = videoType === 'fast' ? 1 : 2;
    
    if (user.credits < creditsRequired) {
      await bot.sendMessage(chatId, `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ${videoType === 'fast' ? '–±—ã—Å—Ç—Ä–æ–≥–æ' : '–ø—Ä–µ–º–∏—É–º'} –≤–∏–¥–µ–æ.\n\n–¢—Ä–µ–±—É–µ—Ç—Å—è: ${creditsRequired} –∫—Ä–µ–¥–∏—Ç–æ–≤\n–£ –≤–∞—Å: ${user.credits} –∫—Ä–µ–¥–∏—Ç–æ–≤`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üí≥ –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã', callback_data: 'buy_credits' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'create_video' }]
          ]
        }
      });
      return;
    }
    
    const message = `üé¨ <b>–°–æ–∑–¥–∞–Ω–∏–µ ${videoType === 'fast' ? '–±—ã—Å—Ç—Ä–æ–≥–æ' : '–ø—Ä–µ–º–∏—É–º'} –≤–∏–¥–µ–æ</b>

–†–µ–∂–∏–º –≤—ã–±—Ä–∞–Ω: ${videoType === 'fast' ? '‚ö° –ë—ã—Å—Ç—Ä—ã–π (5 —Å–µ–∫, 1 –∫—Ä–µ–¥–∏—Ç)' : 'üíé –ü—Ä–µ–º–∏—É–º (10 —Å–µ–∫, 2 –∫—Ä–µ–¥–∏—Ç–∞)'}

<b>–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –≤–∏–¥–µ–æ:</b>
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å
‚Ä¢ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

<i>–ù–∞–ø—Ä–∏–º–µ—Ä: "–ö—Ä–∞—Å–∏–≤—ã–π —Ä–∞—Å—Å–≤–µ—Ç –Ω–∞–¥ –≥–æ—Ä–∞–º–∏ —Å —Ç—É–º–∞–Ω–æ–º"</i>

üí° <b>–°–æ–≤–µ—Ç:</b> –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!`;

    await bot.editMessageText(message, {
      chat_id: chatId,
      message_id: query.message.message_id,
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'create_video' }]
        ]
      }
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    
  } catch (error) {
    logger.error('Error in handleGenerateVideo:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.');
  }
}

async function handleBuyPackage(query, bot) {
  const chatId = query.message.chat.id;
  const packageType = query.data.replace('buy_', '');
  
  // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–ª–∞—Ç–µ–∂–µ–π
  await bot.sendMessage(chatId, `üí≥ –ü–æ–∫—É–ø–∫–∞ –ø–∞–∫–µ—Ç–∞: ${packageType}\n\n‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...`);
}

async function handleHistory(query, bot) {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  
  try {
    const user = await getUserByTelegramId(userId);
    const generations = await getUserVideoGenerations(user.id, 10);
    
    let message = `üìä <b>–ò—Å—Ç–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π</b>\n\n`;
    
    if (generations.length > 0) {
      generations.forEach((gen, index) => {
        const date = new Date(gen.created_at).toLocaleDateString('ru-RU');
        const status = gen.status === 'completed' ? '‚úÖ' : gen.status === 'failed' ? '‚ùå' : '‚è≥';
        message += `${index + 1}. ${date} - ${status} ${gen.video_type} (${gen.credits_used} –∫—Ä–µ–¥–∏—Ç–æ–≤)\n`;
      });
    } else {
      message += '<i>–ì–µ–Ω–µ—Ä–∞—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</i>';
    }
    
    await bot.editMessageText(message, {
      chat_id: chatId,
      message_id: query.message.message_id,
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'balance' }]
        ]
      }
    });
    
  } catch (error) {
    logger.error('Error in handleHistory:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏.');
  }
}

function getTransactionTypeText(type) {
  switch (type) {
    case 'purchase': return 'üí≥ –ü–æ–∫—É–ø–∫–∞';
    case 'generation': return 'üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è';
    case 'referral': return 'üë• –†–µ—Ñ–µ—Ä–∞–ª';
    default: return '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }
}

module.exports = {
  handleCallback
}; 